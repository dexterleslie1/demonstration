# todo 如何每个worker节点平均分配locust slave
# 用于在kubernetes平台上部署locust master-slave模式
# 部署命令
# kubectl create -f deploy.yaml

# 删除命令
# kubectl delete -f deploy.yaml

---
# 从locustfile.py创建ConfigMap

# 使用下面命令获取创建configmap的yaml
# kubectl create configmap --dry-run=client demo-locustfile --from-file=locustfile.py --output yaml
apiVersion: v1
data:
  locustfile.py: |
    import json

    import locust
    from locust import HttpUser, task

    # from __future__ import absolute_import
    # from __future__ import print_function
    from locust import User, between, TaskSet, task, events
    import time


    # def create_conn(conn_string):
    #     print("Connecting to MySQL")
    #     return create_engine('mysql+pymysql://' + conn_string).connect()

    def execute1():
        # _conn = create_conn(conn_string)
        # rs = _conn.execute(query)
        # return rs
        JSON = "{\"errorCode\":0,\"errorMessage\":null,\"dataObject\":\"你好\"}"
        json_object = json.loads(JSON)
        error_code = json_object.get("errorCode")
        if error_code > 0:
            register_success = False
        else:
            register_success = True
        # time.sleep(0.5)
        return register_success


    '''
      The MySQL client that wraps the actual query
      https://stackoverflow.com/questions/76016708/locust-events-object-has-no-attribute-request-success
      https://stackoverflow.com/questions/62968986/problem-updating-locust-script-to-1-x-typeerror-init-takes-1-positional
      https://medium.com/analytics-vidhya/create-custom-clients-in-locust-io-to-test-database-performance-fd71235ece6e
    '''


    class MySqlClient:

        def __getattr__(self, name):
            def wrapper(*args, **kwargs):
                start_time = time.time()
                try:
                    res = execute1()
                    events.request.fire(request_type="mysql",
                                        name=name,
                                        response_time=int((time.time() - start_time) * 1000),
                                        response_length=1,
                                        exception=None,
                                        context={})
                except Exception as e:
                    events.request.fire(request_type="mysql",
                                        name=name,
                                        response_time=int((time.time() - start_time) * 1000),
                                        response_length=1,
                                        exception=e,
                                        context={})

                    print('error {}'.format(e))

            return wrapper


    class HelloWorldUser(User):
        register_success = False

        def __init__(self, parent):
            super().__init__(parent)
            self.client = MySqlClient()

        @task
        def test1(self):
            register_success = self.client.execute1()
kind: ConfigMap
metadata:
  name: demo-locustfile

---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: demo-locust-master
spec:
 selector:
  matchLabels:
   app: locust-master
 template:
  metadata:
   labels:
    app: locust-master
  spec:
   containers:
   - name: locust-master
     image: locustio/locust
     args: ["-f", "/mnt/locust/locustfile.py", "--master", "-H", "http://0.0.0.0:8089"]
     imagePullPolicy: IfNotPresent
     volumeMounts:
     - name: vol-config
       mountPath: /mnt/locust
       readOnly: true
   volumes:
   - name: vol-config
     configMap:
      name: demo-locustfile

---
# 暴露locust master服务
apiVersion: v1
kind: Service
metadata:
 name: demo-locust
spec:
 type: NodePort
 ports:
  - name: port-8089
    port: 8089
    targetPort: 8089
    nodePort: 30000
  - name: port-5557
    port: 5557
    targetPort: 5557
 selector:
  app: locust-master

---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: demo-locust-slave
spec:
 replicas: 16
 selector:
  matchLabels:
   app: locust-slave
 template:
  metadata:
   labels:
    app: locust-slave
  spec:
   topologySpreadConstraints:
   - maxSkew: 1
     topologyKey: kubernetes.io/hostname
     whenUnsatisfiable: ScheduleAnyway
     labelSelector:
      matchLabels:
       app: locust-slave
   initContainers:
   - name: init1
     image: alpine/curl
     # 等待locust master启动后才启动locust slave
     command: ["sh", "-c"]
     args:
     - target_domain=demo-locust;
       while ! curl -s -f -o /dev/null --connect-timeout 5 $target_domain:8089;
       do
          echo "`date` - 命令curl -s -f -o /dev/null --connect-timeout 5 $target_domain:8089 执行失败重试";
          sleep 1;
       done
     imagePullPolicy: IfNotPresent
   containers:
   - name: locust-slave
     image: locustio/locust
     args: ["-f", "/mnt/locust/locustfile.py", "--worker", "--master-host", "demo-locust"]
     imagePullPolicy: IfNotPresent
     volumeMounts:
     - name: vol-config
       mountPath: /mnt/locust
       readOnly: true
   volumes:
   - name: vol-config
     configMap:
      name: demo-locustfile