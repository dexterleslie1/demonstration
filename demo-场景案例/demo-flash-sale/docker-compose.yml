version: "3.1"

services:
  service:
    build:
      context: ./service
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-service
    environment:
      - JAVA_OPTS=-Xmx1g
      - TZ=Asia/Shanghai
    network_mode: host

  crond:
    build:
      context: ./crond
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-crond
    environment:
      - JAVA_OPTS=-Xmx1g
      - TZ=Asia/Shanghai
    network_mode: host

  db:
    build:
      context: db
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-db
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --skip-character-set-client-handshake
    environment:
      - LANG=C.UTF-8
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=123456
    network_mode: host

  redis:
    build:
      context: redis
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    # 设置redis密码
    command: redis-server /usr/local/etc/redis/redis-standalone.conf --requirepass 123456
    environment:
      - TZ=Asia/Shanghai
    network_mode: host

  node1:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    # 必须设置cluster-announce-ip才能够在创建集群时节点join到master，否则会一直waiting...
    command: redis-server /usr/local/etc/redis/redis.conf --port 6380 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'
  node2:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    command: redis-server /usr/local/etc/redis/redis.conf --port 6381 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'
  node3:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    command: redis-server /usr/local/etc/redis/redis.conf --port 6382 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'
  node4:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    command: redis-server /usr/local/etc/redis/redis.conf --port 6383 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'
  node5:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    command: redis-server /usr/local/etc/redis/redis.conf --port 6384 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'
  node6:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-redis
    command: redis-server /usr/local/etc/redis/redis.conf --port 6385 --cluster-announce-ip 127.0.0.1
    environment:
      - TZ=Asia/Shanghai
    network_mode: 'host'

  creator:
    image: redis:6.2.6-bullseye
    entrypoint: [ /bin/sh, -c, 'echo "yes" | redis-cli --cluster create --cluster-replicas 1 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 127.0.0.1:6385' ]
    depends_on:
      - node1
      - node2
      - node3
      - node4
      - node5
      - node6
    network_mode: 'host'

#  namesrv:
#    image: apache/rocketmq:4.9.6
#    command: sh mqnamesrv
#    restart: unless-stopped
#    network_mode: host
#  broker:
#    image: apache/rocketmq:4.9.6
#    environment:
#      - NAMESRV_ADDR=localhost:9876
#    volumes:
#      - ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf
#    depends_on:
#      - namesrv
#    command: sh mqbroker -c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf
#    restart: unless-stopped
#    network_mode: host
#  dashboard:
#    image: apacherocketmq/rocketmq-dashboard:latest
#    environment:
#      - JAVA_OPTS=-Drocketmq.namesrv.addr=localhost:9876
#      - server.port=8081
#    restart: unless-stopped
#    network_mode: host

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # 设置 ZooKeeper 的 JVM 堆内存
      # ZOOKEEPER_HEAP_OPTS: "-Xms1g -Xmx1g"
#    ports:
#      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka-zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${kafka_advertised_listeners}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # 设置 Kafka 的 JVM 堆内存
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
      # 禁用自动创建 Topic，否则 Spring Boot 会自动创建 partitions=0 的 topic
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
  # 在 kafka 服务成功启动后自动配置 kafka 服务
  kafka-create-topic-order-in-cache-sync-to-db:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic topic-order-in-cache-sync-to-db
  kafka-create-topic-increase-count:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 8 --topic topic-increase-count
  kafka-create-order-cassandra-index:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 128 --topic topic-create-order-cassandra-index
  kafka-create-topic-setup-product-flashsale-cache:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 32 --topic topic-setup-product-flashsale-cache
  kafka-create-topic-add-productId-and-stockAmount-into-redis-zset-after-creation:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic topic-add-productId-and-stockAmount-into-redis-zset-after-creation
  kafka-create-topic-publish-choose-product-randomly-for-ordering:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic topic-publish-choose-product-randomly-for-ordering
  kafka-create-topic-random-id-picker-add-id-list:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    environment:
      TZ: Asia/Shanghai
    # 自动创建 topic
    entrypoint: /usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic topic-random-id-picker-add-id-list

  zookeeper:
    image: zookeeper:3.8.4
    environment:
      - TZ=Asia/Shanghai
      - JVMFLAGS=-Xmx512m -Xms512m -server
      # 禁用 zookeeper AdminServer
      # https://hub.docker.com/_/zookeeper
      - ZOO_ADMINSERVER_ENABLED=false
    network_mode: host

  cassandra:
    build:
      context: ./
      dockerfile: Dockerfile-cassandra
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-cassandra
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=256M
    volumes:
      - ./init.cql:/scripts/data.cql:ro
    ports:
      - "9042:9042"

  # skywalking 配置
  skywalking-elasticsearch:
    build:
      context: ./
      dockerfile: Dockerfile-elasticsearch
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-skywalking-elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - discovery.type=single-node
      # http.cors表示允许elasticsearch-head连接并管理
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - TZ=Asia/Shanghai

  wrk2:
    build:
      context: ./
      dockerfile: Dockerfile-wrk2
    image: registry.cn-hangzhou.aliyuncs.com/future-public/demo-flash-sale-wrk2
    environment:
      - TZ=Asia/Shanghai

  # 随机 id 选择器服务
  future-random-id-picker-api:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/random-id-picker-service
    environment:
      - JAVA_OPTS=-Xmx512m
      - TZ=Asia/Shanghai
      - db_host=future-random-id-picker-db
      - db_port=3306
    ports:
      - '50000:8080'
  future-random-id-picker-db:
    image: registry.cn-hangzhou.aliyuncs.com/future-public/random-id-picker-db
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --skip-character-set-client-handshake
      - --innodb-buffer-pool-size=256m
    environment:
      - LANG=C.UTF-8
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=123456
