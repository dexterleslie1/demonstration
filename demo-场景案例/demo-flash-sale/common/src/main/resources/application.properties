spring.profiles.active=dev

server.tomcat.max-threads=512
server.tomcat.threads.max=512
server.tomcat.max-connections=20480
server.tomcat.connection-timeout=65s
server.tomcat.accept-count=20480

spring.datasource.hikari.maximum-pool-size=512
spring.datasource.hikari.minimum-idle=32
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://${common_db_host:localhost}:${common_db_port:3306}/demo
spring.datasource.username=root
spring.datasource.password=123456

mybatis.mapper-locations=classpath:mapper/*.xml,classpath:mapper/**/*.xml

#spring.redis.host=192.168.1.190
#spring.redis.host=localhost
#spring.redis.port=6379
#spring.redis.password=123456

spring.redis.cluster.max-redirects=6
spring.redis.cluster.nodes=${common_redis_cluster_nodes:localhost:6380,localhost:6381,localhost:6382}

#namesrvaddr=${common_rocketmq_namesrvhost:localhost}:9876
spring.kafka.bootstrap-servers=${kafka_bootstrap_servers:localhost}:9092
spring.kafka.consumer.group-id=my-group
# \u8BBE\u7F6E\u6BCF\u6B21 poll \u8FD4\u56DE\u7684\u6700\u5927\u8BB0\u5F55\u6570
spring.kafka.consumer.max-poll-records=1024

spring.redis.lettuce.pool.max-active=1024

logging.level.com.future.demo=info

# \u542F\u7528\u96EA\u82B1\u7B97\u6CD5\u751F\u6210\u5206\u5E03\u5F0FID
leaf.snowflake.enable=true
# zookeeper\u5730\u5740
leaf.snowflake.address=${common_zookeeper_host:localhost}:2181
# Leaf \u901A\u8FC7\u7B2C\u4E00\u4E2A\u7F51\u5361 ip\u5730\u5740+leaf.snowflake.port \u751F\u6210 wokerId\uFF0C
# \u5982\u679C\u5728\u540C\u4E00\u53F0\u4E3B\u673A\u4E2D\u8FD0\u884C\u4E24\u4E2A Leaf \u670D\u52A1\uFF0C\u5219 workerId \u4F1A\u91CD\u590D\uFF0C
# \u901A\u8FC7\u624B\u52A8\u914D\u7F6E\u968F\u673A\u751F\u6210 leaf.snowflake.port \u907F\u514D\u91CD\u590D\u7684 workerId
leaf.snowflake.port=${random.int%1000000000}

# \u5546\u54C1\u7684\u603B\u6570
totalOrderCount=5000000

cassandra.contact-points=${common_cassandra_contact_points:localhost:9042}

# \u6307\u5B9Aactuator\u7AEF\u53E3
management.server.port=8081
# \u66B4\u9732\u6240\u6709\u7AEF\u70B9\uFF08\u5728\u751F\u4EA7\u73AF\u5883\u4E2D\u5E94\u8C28\u614E\u4F7F\u7528\uFF09
management.endpoints.web.exposure.include=*
# \u652F\u6301prometheus\u76D1\u63A7\u6307\u6807/actuator/prometheus\u7AEF\u70B9
management.metrics.export.prometheus.enabled=true
# \u6216\u8005\uFF0C\u53EA\u66B4\u9732\u7279\u5B9A\u7684\u7AEF\u70B9
# management.endpoints.web.exposure.include=health,info,metrics
# \u914D\u7F6EActuator\u7AEF\u70B9\u7684\u5B89\u5168\u6027\uFF08\u5982\u9700\u8981\u8EAB\u4EFD\u9A8C\u8BC1\uFF09
# \u8FD9\u901A\u5E38\u4E0ESpring Security\u4E00\u8D77\u914D\u7F6E
# \u4F8B\u5982\uFF0C\u4F7F\u7528Spring Security\u7684\u9ED8\u8BA4\u914D\u7F6E\u6765\u4FDD\u62A4Actuator\u7AEF\u70B9
# spring.security.user.name=actuator
# spring.security.user.password=actuatorPassword
# \u6CE8\u610F\uFF1A\u4E0A\u9762\u7684\u7528\u6237\u540D\u548C\u5BC6\u7801\u914D\u7F6E\u4EC5\u7528\u4E8E\u793A\u4F8B\uFF0C\u5B9E\u9645\u751F\u4EA7\u73AF\u5883\u4E2D\u5E94\u4F7F\u7528\u66F4\u5B89\u5168\u7684\u8EAB\u4EFD\u9A8C\u8BC1\u673A\u5236
