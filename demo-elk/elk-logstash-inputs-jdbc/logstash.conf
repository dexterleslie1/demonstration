input {
    jdbc {
      jdbc_driver_library => "${HOME}/mysql-connector-java-8.0.23.jar"
      jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
      jdbc_connection_string => "jdbc:mysql://192.168.1.181:50000/demo_logstash_inputs_jdbc"
      jdbc_user => "root"
      jdbc_password => "123456"
      jdbc_paging_enabled => true
      jdbc_page_size => 3
      tracking_column => "update_time_in_seconds"
      use_column_value => true
      tracking_column_type => "numeric"
      # 每15秒同步一次
      schedule => "*/15 * * * * *"
      statement => "select id,content,to_seconds(updateTime) as update_time_in_seconds from t_testing where (to_seconds(updateTime) > :sql_last_value and updateTime < now()) order by id asc"
      type=>"testing1"
      last_run_metadata_path => "${HOME}/data-logstash/.logstash_jdbc_last_run_testing1"
    }

    jdbc {
      jdbc_driver_library => "${HOME}/mysql-connector-java-8.0.23.jar"
      jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
      jdbc_connection_string => "jdbc:mysql://192.168.1.181:50000/demo_logstash_inputs_jdbc"
      jdbc_user => "root"
      jdbc_password => "123456"
      jdbc_paging_enabled => true
      jdbc_page_size => 3
      tracking_column => "update_time_in_seconds"
      use_column_value => true
      tracking_column_type => "numeric"
      # 每15秒同步一次
      schedule => "*/15 * * * * *"
      statement => "select id,content,to_seconds(updateTime) as update_time_in_seconds from t_testing2 where (to_seconds(updateTime) > :sql_last_value and updateTime < now()) order by id asc"
      type=>"testing2"
      last_run_metadata_path => "${HOME}/data-logstash/.logstash_jdbc_last_run_testing2"
    }
}

filter {
  if [type]=="testing1" {
    # 使用json插件解析content内容
    json {
      source=>"content"
      target=>"contentTemporary"
    }

    # 如果不存在[contentTemporary][contentText]表示原始的content不是JSON格式
    if [contentTemporary][contentText] {
      mutate {
        replace=>{"content"=>"%{[contentTemporary][contentText]}"}
      }
    }
  }

  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["id", "@version", "update_time_in_seconds", "contentTemporary", "type"]
  }
}

output {
    stdout {

    }
}