server.port=18080

# \u914D\u7F6Emybatis xml\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84
mybatis.mapper-locations=classpath:mapper/*.xml,classpath:mapper/**/*.xml
# \u542F\u7528\u6570\u636E\u5E93\u5B57\u6BB5\u4E0B\u5212\u7EBF\u5230`bean`\u9A7C\u5CF0\u547D\u540D\u81EA\u52A8\u8F6C\u6362
mybatis.configuration.map-underscore-to-camel-case=true

# \u8F93\u5165SQL\u5230\u65E5\u5FD7\u4E2D
#logging.level.root=debug
logging.level.com.future.demo=info

# ------------------------------------ \u6C34\u5E73\u5206\u8868\u914D\u7F6E ------------------------------------
#spring.shardingsphere.datasource.names=ds1
#spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds1.driver-class-name=org.mariadb.jdbc.Driver
#spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mariadb://localhost:3306/demo?allowMultiQueries=true
#spring.shardingsphere.datasource.ds1.username=root
#spring.shardingsphere.datasource.ds1.password=123456
#
## \u6307\u5B9Aorder\u8868\u7684\u4E3B\u952E\u751F\u6210\u7B56\u7565\u4E3ASNOWFLAKE
#spring.shardingsphere.sharding.tables.order.key-generator.column=id
#spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.order.key-generator.props.worker.id=1
## \u6307\u5B9Aorder\u8868\u7684\u6570\u636E\u5206\u5E03\u60C5\u51B5\uFF0C\u914D\u7F6E\u6570\u636E\u8282\u70B9
## \u64CD\u4F5C\u6240\u6709\u8868\u7684 SQL \u9700\u8981\u6839\u636E\u6B64\u4FE1\u606F\u751F\u6210\u5B9E\u9645 SQL\uFF0C\u4F8B\u5982\uFF1Atruncate SQL\u7B49
#spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds1.order_$->{1..2}
## order\u8868\u7684\u5206\u7247\u7B56\u7565\uFF0C\u5206\u7247\u7B56\u7565\u5305\u62EC\u5206\u7247\u952E\u548C\u5206\u7247\u7B97\u6CD5
#spring.shardingsphere.sharding.tables.order.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.order.table-strategy.inline.algorithm-expression=order_$->{id % 2 + 1}
# ------------------------------------ \u6C34\u5E73\u5206\u8868\u914D\u7F6E ------------------------------------

# ------------------------------------ \u6C34\u5E73\u5206\u8868+\u6C34\u5E73\u5206\u5E93\u914D\u7F6E ------------------------------------
#spring.shardingsphere.datasource.names=ds1,ds2
#spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds1.driver-class-name=org.mariadb.jdbc.Driver
#spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mariadb://localhost:3306/demo?allowMultiQueries=true
#spring.shardingsphere.datasource.ds1.username=root
#spring.shardingsphere.datasource.ds1.password=123456
#
#spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds2.driver-class-name=org.mariadb.jdbc.Driver
#spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mariadb://localhost:3307/demo?allowMultiQueries=true
#spring.shardingsphere.datasource.ds2.username=root
#spring.shardingsphere.datasource.ds2.password=123456
#
## \u914D\u7F6Eorder\u903B\u8F91\u8868\u7684\u5206\u5E93\u7B56\u7565
#spring.shardingsphere.sharding.tables.order.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.order.database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}
#
## \u6307\u5B9Aorder\u8868\u7684\u4E3B\u952E\u751F\u6210\u7B56\u7565\u4E3ASNOWFLAKE
#spring.shardingsphere.sharding.tables.order.key-generator.column=id
#spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.order.key-generator.props.worker.id=1
## \u6307\u5B9Aorder\u8868\u7684\u6570\u636E\u5206\u5E03\u60C5\u51B5\uFF0C\u914D\u7F6E\u6570\u636E\u8282\u70B9
## \u64CD\u4F5C\u6240\u6709\u8868\u7684 SQL \u9700\u8981\u6839\u636E\u6B64\u4FE1\u606F\u751F\u6210\u5B9E\u9645 SQL\uFF0C\u4F8B\u5982\uFF1Atruncate SQL\u7B49
#spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds$->{1..2}.order_$->{1..2}
## order\u8868\u7684\u5206\u7247\u7B56\u7565\uFF0C\u5206\u7247\u7B56\u7565\u5305\u62EC\u5206\u7247\u952E\u548C\u5206\u7247\u7B97\u6CD5
#spring.shardingsphere.sharding.tables.order.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.order.table-strategy.inline.algorithm-expression=order_$->{id % 2 + 1}
# ------------------------------------ \u6C34\u5E73\u5206\u8868+\u6C34\u5E73\u5206\u5E93\u914D\u7F6E ------------------------------------

# ------------------------------------ \u6807\u51C6\u5206\u7247\u7B56\u7565\u7684\u7CBE\u51C6\u5206\u7247\u7B97\u6CD5 - PreciseShardingAlgorithm ------------------------------------
spring.shardingsphere.datasource.names=ds1,ds2
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=org.mariadb.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mariadb://localhost:3306/demo?allowMultiQueries=true
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=org.mariadb.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mariadb://localhost:3307/demo?allowMultiQueries=true
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456

spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds$->{1..2}.order_$->{1..2}

spring.shardingsphere.sharding.tables.order.key-generator.column=id
spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.order.key-generator.props.worker.id=1

# \u914D\u7F6E\u6570\u636E\u6E90\u5206\u7247\u7B97\u6CD5
spring.shardingsphere.sharding.tables.order.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.sharding.tables.order.database-strategy.standard.precise-algorithm-class-name=com.future.demo.algorithm.database.MyDatabaseStandardPreciseShardingAlgorithm
# \u914D\u7F6E\u8303\u56F4\u5206\u7247\u7B97\u6CD5\uFF0C\u5426\u5219\u62A5\u544A\u9519\u8BEF Cause: java.lang.UnsupportedOperationException: Cannot find range sharding strategy in sharding rule.
spring.shardingsphere.sharding.tables.order.database-strategy.standard.range-algorithm-class-name=com.future.demo.algorithm.database.MyDatabaseStandardRangeShardingAlgorithm

# \u914D\u7F6E\u6570\u636E\u8868\u5206\u7247\u7B97\u6CD5
spring.shardingsphere.sharding.tables.order.table-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.order.table-strategy.standard.precise-algorithm-class-name=com.future.demo.algorithm.table.MyTableStandardPreciseShardingAlgorithm
# \u914D\u7F6E\u8303\u56F4\u5206\u7247\u7B97\u6CD5\uFF0C\u5426\u5219\u62A5\u544A\u9519\u8BEF Cause: java.lang.UnsupportedOperationException: Cannot find range sharding strategy in sharding rule.
spring.shardingsphere.sharding.tables.order.table-strategy.standard.range-algorithm-class-name=com.future.demo.algorithm.table.MyTableStandardRangeShardingAlgorithm
# ------------------------------------ \u6807\u51C6\u5206\u7247\u7B56\u7565\u7684\u7CBE\u51C6\u5206\u7247\u7B97\u6CD5 - PreciseShardingAlgorithm ------------------------------------

# ------------------------------------ \u5782\u76F4\u5206\u5E93\u914D\u7F6E ------------------------------------
# \u903B\u8F91\u8868user\u5728\u6570\u636E\u6E90ds1\u7684\u7269\u7406\u8868user\u4E2D
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds1.user
# ------------------------------------ \u5782\u76F4\u5206\u5E93\u914D\u7F6E ------------------------------------

# ------------------------------------ \u516C\u5171\u8868\u914D\u7F6E ------------------------------------
spring.shardingsphere.sharding.broadcast-tables=dict
# ------------------------------------ \u516C\u5171\u8868\u914D\u7F6E ------------------------------------

# ------------------------------------ \u7ED1\u5B9A\u8868\u914D\u7F6E ------------------------------------
spring.shardingsphere.sharding.tables.product.key-generator.column=id
spring.shardingsphere.sharding.tables.product.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.product.key-generator.props.worker.id=1
spring.shardingsphere.sharding.tables.product.actual-data-nodes=ds1.product_$->{1..2}
spring.shardingsphere.sharding.tables.product.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.product.table-strategy.inline.algorithm-expression=product_$->{id % 2 + 1}

spring.shardingsphere.sharding.tables.product_description.key-generator.column=id
spring.shardingsphere.sharding.tables.product_description.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.product_description.key-generator.props.worker.id=1
spring.shardingsphere.sharding.tables.product_description.actual-data-nodes=ds1.product_description_$->{1..2}
spring.shardingsphere.sharding.tables.product_description.table-strategy.inline.sharding-column=product_id
spring.shardingsphere.sharding.tables.product_description.table-strategy.inline.algorithm-expression=product_description_$->{product_id % 2 + 1}
# \u7ED1\u5B9A\u8868\u5173\u952E\u914D\u7F6E\uFF0C\u914D\u7F6E\u540E\u4E0D\u4F1Aproduct\u548Cproduct_description\u903B\u8F91\u8868\u5728\u751F\u6210\u5B9E\u9645\u8868\u65F6\u5C31\u4E0D\u4F1A\u53D1\u751F\u8FEA\u5361\u5C14\u79EF
spring.shardingsphere.sharding.binding-tables[0]=product,product_description
# ------------------------------------ \u7ED1\u5B9A\u8868\u914D\u7F6E ------------------------------------

# \u6253\u5F00sql\u8F93\u51FA\u65E5\u5FD7
spring.shardingsphere.props.sql.show=true

# \u542F\u7528\u96EA\u82B1\u7B97\u6CD5\u751F\u6210\u5206\u5E03\u5F0FID
leaf.snowflake.enable=true
# zookeeper\u5730\u5740
leaf.snowflake.address=127.0.0.1:2181
