#user  nobody;
worker_processes auto;
worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
error_log logs/error.log  crit;
error_log logs/error_naxsi.log warn;

events {
    worker_connections  65535;
}

http {
    #log_format access '[$time_local] "$request" $status $request_body "$http_refferer" "$http_user_agent" $http_x_forwarded_for';
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/javascript text/css application/xml;
    gzip_vary on;
    server_tokens off;
    autoindex off;
    access_log off;
    gzip_proxied any;

    # 反向代理配置
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;

    map $http_x_forwarded_for $varClientIp {
        "" $remote_addr;
        ~^(?P<firstAddr>[0-9\.]+),?.*$ $firstAddr;
    }
    limit_conn_zone $varClientIp zone=conn_zone:128m;
    limit_conn conn_zone 10;
    client_max_body_size 120k;
    client_body_buffer_size 10k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 8k;
    client_header_timeout 5s;
    client_body_timeout 5s;
 
    lua_shared_dict my_limit_req_store 128m;    
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;;";
    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=2g use_temp_path=off;

    lua_shared_dict dict_valve 512k;
    lua_shared_dict dict_log_tail 16m;
    lua_shared_dict dict_banned 16m;
    # 故意不进行客户端挑战犯规次数
    lua_shared_dict dict_fault_count 16m;
    # 通过验证后的ip白名单
    lua_shared_dict dict_ip_whitelist 256m;
    lua_shared_dict dict_lock 1m;
    # 用于临时存储数据
    lua_shared_dict dict_temporary_store 16m;
    lua_shared_dict dictStressStatistic 512m;
	
    init_by_lua_block {
        local _ = require "resty.uuid"
    }

    # 后端
    upstream backendd {
        keepalive 1024;
        server ##upstreamBackendd##;
    }

    server {
        listen       80;
        server_name  localhostd;

        location / {
		proxy_set_header Host $host:$server_port;
                proxy_http_version 1.1;
                proxy_set_header Connection '';
                #proxy_pass http://backendd;

                rewrite_by_lua_block {
                        local common = require("my_common")
                        local clientIp = common.getClientIp(##frontend##)
                        common.intercept(clientIp)
                }

                content_by_lua_block {
                        ngx.header.content_type = "text/plain;charset=utf-8";
                        local response = "你好，中国d";
                        ngx.say(response);
                }
        }

	location /stats {
                content_by_lua_block {
			local ip2region = require 'resty.ip2region'
                        local ip2regionLocation = ip2region.new({
                                file = "/usr/local/openresty/ip2region.db",
                                dict = "ip_data",
                                mode = "memory" -- maybe memory,binary or btree
                        });

                        local dictStressStatistic = ngx.shared.dictStressStatistic
                        local varKeys = dictStressStatistic:get_keys()
                        local varLen = #varKeys
                        local responseText = ""
                        if varLen > 0 then
                                for i,data in ipairs(varKeys) do
                                        local count = dictStressStatistic:get(data)
                                        local ip = data:gsub("count#", "")
                                        --ngx.log(ngx.ERR, "+++++++++" .. ip .. "=" .. count)
                                        local res, err = ip2regionLocation:search(ip)
                                        local country = ""
                                        local province = ""
                                        if res then
                                                country = res["country"]
                                                province = res["province"]
                                        end
                                        local responseTextTemp = ip .. "（" .. country .. "，" .. province .. "），count=" .. count
                                        responseText = responseText .. responseTextTemp .. "<br>"
                                end
                        end
                        ngx.header.content_type = "text/html;charset=utf-8"
                        ngx.say(responseText)
                }
        }
    }
}
