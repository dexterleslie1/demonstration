#user  nobody;
# worker_processes auto; 表示设置服务器cpu核数匹配开启nginx开启的worker进程数。
worker_processes  auto;
worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
error_log  logs/error.log  notice;

events {
    worker_connections  65535;
}


http {
    #log_format access '[$time_local] "$request" $status $request_body "$http_refferer" "$http_user_agent" $http_x_forwarded_for';
    include       mime.types;
    include       /usr/local/openresty/nginx/conf/naxsi_core.rules;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/javascript text/css application/xml;
    gzip_vary on;
    server_tokens off;
    autoindex off;
    access_log off;
    client_body_buffer_size  10k;
    client_header_buffer_size 1k;
    client_max_body_size 2m;
    large_client_header_buffers 2 8k;
    gzip_proxied any;

    # 反向代理配置
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;

    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=2g use_temp_path=off;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            include /usr/local/openresty/nginx/conf/naxsi.rules;
            proxy_http_version 1.1;
            proxy_set_header Connection '';
            content_by_lua_block {
                -- 下面lua脚本用于模拟业务逻辑对内存和cpu产生负载
                -- https://github.com/openresty/lua-resty-string

                -- 休眠5秒能够有效地防御3个hey -z 1800s -c 512 http://192.168.1.185/
                -- 使4核cpu维持在50%消耗左右
                -- ngx.sleep(5)

             	ngx.header.content_type = "text/plain"
             	           
                local resty_md5 = require "resty.md5"
                local md5 = resty_md5:new()
                if not md5 then
                    ngx.say("failed to create md5 object")
                    return
                end

                local resty_random = require "resty.random"
                local str = require "resty.string"
                -- 81920个字节很好地模拟cpu消耗，并发高时所有cpu跑满
                local random = resty_random.bytes(81920)
                local random_str = str.to_hex(random)

                local ok = md5:update(random_str)
                if not ok then
                    ngx.say("failed to add data")
                    return
                end

                local digest = md5:final()
                local str = require "resty.string"
                local md5_str = str.to_hex(digest)
                ngx.say("md5: " .. md5_str .. ",random string: " .. random_str)
         	}
        }

        location /request_denied {
            default_type application/json;
            return 403 '{"errorCode":600,"errorMessage":"您提交数据存在安全问题，被服务器拒绝，修改数据后重试"}';
        }
    }
}
