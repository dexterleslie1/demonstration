#user  nobody;
worker_processes auto;
worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
error_log logs/error.log  crit;
error_log logs/error_naxsi.log warn;

events {
    worker_connections  65535;
}

http {
    include /usr/local/openresty/nginx/conf/naxsi_core.rules;
    #log_format access '[$time_local] "$request" $status $request_body "$http_refferer" "$http_user_agent" $http_x_forwarded_for';
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/javascript text/css application/xml;
    gzip_vary on;
    server_tokens off;
    autoindex off;
    access_log off;
    gzip_proxied any;

    # 反向代理配置
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;

    map $http_x_forwarded_for $varClientIp {
        "" $remote_addr;
        ~^(?P<firstAddr>[0-9\.]+),?.*$ $firstAddr;
    }
    limit_conn_zone $varClientIp zone=conn_zone:128m;
    limit_conn conn_zone 10;
    client_max_body_size 120k;
    client_body_buffer_size 10k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 8k;
    client_header_timeout 5s;
    client_body_timeout 5s;
 
    lua_shared_dict my_limit_req_store 128m;    
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;;";
    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=2g use_temp_path=off;

    lua_shared_dict dict_log_tail 16m;

    #upstream backendlogin {
    #    keepalive 1024;
    #    server kgx-login:8080;
    #}

    # 未登录后端
    #upstream backendnonelogin {
    #    keepalive 1024;
    #    server kgx-nonelogin:8080;
    #}

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        set $naxsi_extensive_log 1;

        location @locationlogin {
                proxy_set_header Host $host:$server_port;
                proxy_http_version 1.1;
                proxy_set_header Connection '';
                #proxy_pass http://backendlogin;

                content_by_lua_block {
                        ngx.status = 200
                        ngx.header.content_type = "text/plain;charset=utf-8"
                        local response = "你好，中国，已登录"
                        ngx.say(response)
                }
        }

        location @locationnonelogin {
                proxy_set_header Host $host:$server_port;
                proxy_http_version 1.1;
                proxy_set_header Connection '';
                #proxy_pass http://backendnonelogin;

                content_by_lua_block {
                        ngx.status = 200
                        ngx.header.content_type = "text/plain;charset=utf-8"
                        local response = "你好，中国，未登录"
                        ngx.say(response)
                }
        }

        location / {
                include /usr/local/openresty/nginx/conf/naxsi.rules;

                # 根据用户登录状态分流
                content_by_lua_block {
                    ngx.req.read_body()
                    local hasTicket = not (ngx.req.get_post_args()["ticket"] == nil)
                    if not hasTicket then
                        hasTicket = not (ngx.req.get_uri_args()["ticket"] == nil)
                    end
                    if hasTicket then
                        -- ngx.log(ngx.ERR, "带有ticket的请求，请求准备转发到已登录后端")
                        ngx.exec("@locationlogin")
                    else
                        -- ngx.log(ngx.ERR, "没有ticket的请求，请求准备转发到未登录后端")
                        ngx.exec("@locationnonelogin")
                    end
                }
        }

        location /RequestDenied {

            content_by_lua_block {
                ngx.header.content_type = "application/json";
                local response = '{"errorCode":50000,"errorMessage":"输入有误，请重新输入"}';
                ngx.say(response);
            }
        }
    }
}

