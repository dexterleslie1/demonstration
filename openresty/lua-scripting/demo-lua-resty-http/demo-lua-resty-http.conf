# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    resolver 114.114.114.114;
    include       mime.types;
    default_type  application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
	
    access_by_lua_block {
	-- 参考资料
        -- https://github.com/ledgetech/lua-resty-http
	local httpc = require("resty.http").new()

	-- Single-shot requests use the `request_uri` interface.
	local res, err = httpc:request_uri("http://gw.m.163.com/search/api/v1/pc-wap/rolling-word", {
   		method = "GET",
    		body = "a=1&b=2",
    		headers = {
        		["Content-Type"] = "application/x-www-form-urlencoded",
   	 	},
	})
	if not res then
    		ngx.log(ngx.ERR, "request failed: ", err)
    		return
	end

	-- At this point, the entire request / response is complete and the connection
	-- will be closed or back on the connection pool.

	-- The `res` table contains the expeected `status`, `headers` and `body` fields.
	local status = res.status
	local length = res.headers["Content-Length"]
	local body   = res.body
	ngx.status = status
	ngx.header.content_type = "application/json;charset=utf-8"
	ngx.say(body)
    }

    server {
	listen       80;
	server_name  localhost;
    }
}
