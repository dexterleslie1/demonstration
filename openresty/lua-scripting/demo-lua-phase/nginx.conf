# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 开启debug级别日志，否则ngx.log不能输出debug级别日志
# https://stackoverflow.com/questions/55975325/nothing-is-written-to-nginx-access-log-error-log-how-to-troubleshoot
error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    sendfile        on;
    #tcp_nopush     on;
 
    # 禁用nginx keepalive
    # 参考 https://cinhtau.net/2017/12/19/no-keep-alive-nginx/#:~:text=The%20first%20parameter%20sets%20a,%3Dtime%E2%80%9D%20response%20header%20field.
    keepalive_timeout  0;

    #gzip  on;

    # 当nginx主进程加载或reload重新加载配置文件时会回调此阶段
    lua_shared_dict dogs 1m;
    init_by_lua_block {
        -- 在服务器启动时预加载 Lua 模块
        cjson = require "cjson"

        -- 初始化共享存储
        local dogs = ngx.shared.dogs;
        dogs:set("Tom", 56)
    }

    # 每个worker进程启动时回调此阶段
    init_worker_by_lua_block {
        ngx.timer.every(5, function(premature)  
            if premature then  
                return  
            end  
  
            -- 执行周期性任务  
            local now = ngx.now()  
            ngx.log(ngx.NOTICE, "执行周期性任务，当前时间： ", now)  
        end)
    }

    # 在请求被处理完毕后，但在发送响应给客户端之前时执行
    # 提醒：即使lua脚本执行出错，此阶段依旧被回调
    # 提醒：在http配置块中配置的log_by_lua_block会被所有请求触发回调
    # log_by_lua_block {
    #     ngx.log(ngx.NOTICE, "这是log_by_lua_block在http配置块中输出的日志！！！")
    # }

    server {
    	listen       80;
    	server_name  localhost;
	
    	location / {
            content_by_lua_block {
                ngx.header.content_type = "text/json;charset=utf-8";
                ngx.say(cjson.encode({dog = ngx.shared.dogs:get('Tom'), cat = 8}))
            }
    	}

        location /2 {
            content_by_lua_block {
                ngx.header.content_type = "text/text;charset=utf-8";
                ngx.say("成功调用接口2")
            }

            # 测试log_by_lua_block在不同的location配置块中是否各自独立的
            # 结论：log_by_lua_block在location配置块中时，各个location配置的log_by_lua_block是相互独立的
            log_by_lua_block {
                ngx.log(ngx.NOTICE, "这是log_by_lua_block在location配置块中输出的日志！！！")
            }
    	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }
    }
}
