# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
	
    access_by_lua_block {
	-- 参考资料
        -- https://blog.huati365.com/7356d05c9c25cd87
 
	local cjson = require "cjson"
	local sampleJson = [[{"age":"23","testArray":{"array":[8,9,11,14,25]},"Himi":"himigame.com"}]];
	--解析json字符串
	local data = cjson.decode(sampleJson);
	--打印json字符串中的age字段
	ngx.log(ngx.ERR, "age=" .. data["age"]);
	--打印数组中的第一个值(lua默认是从0开始计数)
	ngx.log(ngx.ERR, "array element=" .. data["testArray"]["array"][1]);    

	local retTable = {};    --最终产生json的表
	--顺序数值
	local intDatas = {};
	intDatas[1] = 100;
	intDatas[2] = "100";
	--数组
	local aryDatas = {};
	aryDatas[1] = {};
	aryDatas[1]["键11"] = "值11";
	aryDatas[1]["键12"] = "值12";
	aryDatas[2] = {};
	aryDatas[2]["键21"] = "值21";
	aryDatas[2]["键22"] = "值22";
	--对Table赋值
	retTable["键1"] = "值1";
	retTable[2] = 123;
	retTable["int_datas"] = intDatas;
	retTable["aryDatas"] = aryDatas;
	--将表数据编码成json字符串
	local jsonStr = cjson.encode(retTable);
	--结果是:{"int_datas":[100,"100"],"2":123,"键1":"值1","aryDatas":[{"键12":"值12","键11":"值11"},{"键21":"值21","键22":"值22"}]} 	
	ngx.log(ngx.ERR, "jsonStr=" .. jsonStr)
    }

    server {
		listen       80;
		server_name  localhost;
	}
}
