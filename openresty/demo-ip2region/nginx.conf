# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
	
    access_by_lua_block {
	local ip2region = require 'resty.ip2region';
	local location = ip2region.new({
		file = "/usr/local/openresty/ip2region.db",
		dict = "ip_data",
		mode = "memory" -- maybe memory,binary or btree
	});
	-- 这个是广州ip，geoip2不能解析：119.143.73.28
        local data, err = location:search('202.108.22.5');
	--local data, err = location:search('119.143.73.28')
	--[[
        	{
			country = "中国",
			region = "华东"
			province = "浙江", 
			city = "杭州", 
			isp = "电信"
        	}
        --]]
	ngx.status = 200
        ngx.header.content_type = "text/html;charset=utf-8"
	if (err == nil) then
		local cjson = require "cjson"
		ngx.say(cjson.encode(data))
        else
                ngx.say(err)
        end
    }

    server {
	listen       80;
	server_name  localhost;
    }
}
