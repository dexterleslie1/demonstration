# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 开启debug级别日志，否则ngx.log不能输出debug级别日志
# https://stackoverflow.com/questions/55975325/nothing-is-written-to-nginx-access-log-error-log-how-to-troubleshoot
error_log  logs/error.log  notice;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log off;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 演示使用resty.limit.req模块限制客户端请求速率
    # https://github.com/openresty/lua-resty-limit-traffic/blob/master/lib/resty/limit/req.md
    lua_shared_dict my_limit_req_store 100m;

    init_by_lua_block {
        -- 是否面向客户端的openresty
        -- 是：防止客户端伪造x-forwarded-for头
        -- 否：不需要任何处理
        frontend = false
        -- qps限制请求速率阈值
        rate = 30
        -- qps限制突发请求速率
        burst = 100;

        -- 获取客户端ip地址
        function get_client_ip(frontend --[[是否面向客户端的openresty]])
            local client_ip = nil
            if frontend then
                client_ip = ngx.var.remote_addr
            else
                -- 非面向客户端的openresty，解析x-forwarded-for中第一个ip地址作为客户端ip地址
                local headers = ngx.req.get_headers()
                local xForwardedFor = headers["x-forwarded-for"]
                if xForwardedFor then
                    for field in xForwardedFor:gmatch('([^,]+)') do
                        client_ip = field
                        break
                    end
                else
                    -- 如果没有x-forwarded-for（这是意料之外，不应该发生）
                    client_ip = ngx.var.remote_addr
                end
            end

            return client_ip
        end

        math.randomseed(ngx.now())

        local limit_req = require "resty.limit.req"

        -- limit the requests under 200 req/sec with a burst of 100 req/sec,
        -- that is, we delay requests under 300 req/sec and above 200
        -- req/sec, and reject any requests exceeding 300 req/sec.
        -- qps小于rate阈值正常处理，qps大于rate阈值小于burst被延迟，qps大于rate+burst拒绝5
        -- 使用jmeter模拟需要主要设置ramp-up period(seconds)值，否则超过rate+burst阈值会被拒绝
        lim, err = limit_req.new("my_limit_req_store", rate, burst)
        if not lim then
            ngx.log(ngx.ERR,
                    "failed to instantiate a resty.limit.req object: ", err)
            return ngx.exit(500)
        end
    }

    access_by_lua_block {
        -- 如果是面向客户端的openresty防止客户端伪造x-forwarded-for头
        if frontend then
            -- 删除客户端传来的x-forwarded-for头
            ngx.req.clear_header("x-forwarded-for");
            -- 设置客户端ip地址
            local client_ip = ngx.var.remote_addr
            ngx.req.set_header("x-forwarded-for", client_ip);
            -- ngx.log(ngx.NOTICE, "客户端ip地址：" .. client_ip)
        end

        local client_ip = get_client_ip(frontend)
        local delay, err = lim:incoming(client_ip, true)
        if not delay then
            if err == "rejected" then
                ngx.log(ngx.WARN, "客户端 " .. client_ip .. " 触发qps限制被拒绝服务，因为超过请求速率为" .. tostring(rate+burst) .. "阈值")

                -- 拒绝请求时需要限速
                local randomInt = math.random(0, 5)
                if randomInt > 0 then
                    ngx.sleep(randomInt)
                end

                return ngx.exit(503)
            end
            ngx.log(ngx.ERR, "failed to limit req: ", err)
            return ngx.exit(500)
        end

        if delay >= 0.001 then
            -- the 2nd return value holds  the number of excess requests
            -- per second for the specified key. for example, number 31
            -- means the current request rate is at 231 req/sec for the
            -- specified key.
            local excess = err
                    
            -- the request exceeding the 200 req/sec but below 300 req/sec,
            -- so we intentionally delay it here a bit to conform to the
            -- 200 req/sec rate.
            ngx.log(ngx.WARN, "客户端 " .. client_ip .. " 触发qps限制被延迟" .. tostring(delay) .. "秒")
            ngx.sleep(delay)
        end
    }

    server {
    	listen       80;
    	server_name  localhost;
	
    	location / {
            content_by_lua_block {
                ngx.header.content_type = "text/plain;charset=utf-8";
                ngx.say("Hello Dexterleslie！当前时间：" .. ngx.now());
            }
    	}
    }
}
